### Build-rules for components local to +U-s


## Project targets info
# @main: all help @configure @build @test
# @all: @build @test


## Main project targets

# @at.init: @configure :install @check
# @at.configure: @build-env
# @at.check: @lint
# @at.build: @check &context-local &current src-sh manual
# @at.test: %bats-baseline %bats-unit

# XXX:
# @at.env: all @configure @check


## Other alias groups

# @and.ctx-local: &context-local
# @at.lint: *lint
# @at.manual: :manuals


# These are hard-wired by parts run during build-env,
# these are caches included in ~, and a complete build-env cache file
*caches expand ${PROJECT_CACHE:?}/{params,redo-env}.sh

# With working symbol frontend could ask for above. Until then a particular
# path is given, to be used to configure parent target for all build-env parts:

@build-env function -

@configured ifdone @configure



## Symbols for single targets and mapped sets

&build-rules expand ${PROJECT_CACHE:?}/build-rules.list
&context-local expand ${PROJECT_CACHE:?}/context-local.list
&current alias .meta/cache/ledges.list
*lint expand \&{tags,shellcheck}-lint
&sh-dev-list expand ${PROJECT_CACHE:?}/source-dev-sh.list
&sh-list expand ${PROJECT_CACHE:?}/source-sh.list
&shellcheck-lint expand ${PROJECT_CACHE:?}/lint-shellcheck.list
&source-dev-list expand ${PROJECT_CACHE:?}/source-dev.list
&source-list expand ${PROJECT_CACHE:?}/source.list
&tags-lint expand ${PROJECT_CACHE:?}/lint-tags.list


## Symbols for mappings to directives and functions

&build-rules:* defer concat-rules
# TODO: install-deps check
# Baseline describes third-party components, dependencies, host.hk
# For host/env prerequisites and checks see init and init-checks targets.
%bats-baseline simpleglob .build/tests/baseline-*.tap test/baseline/%.bats
%bats-unit simpleglob .build/tests/unit-*.tap test/unit/%.bats
# TODO: benchmarks
&context-local:* defer-sequence uconf-deps context-local
&sh-list:* if :git:index -- eval git ls-files '*.sh' 'sh-*' '*.do' '*.bats'
&shellcheck-lint:* if &sh-dev-list -- part lint-shellcheck source-do
&source-list:* if :git:index -- exec git ls-files
&tags-lint:* if &source-dev-list -- part lint-tags source-do


## Function handlers

:check function -
:install function
:git:index part scm-git-index

# Use 'source-do' directly during dev to avoid needless rebuilds
:lint:shellcheck: part lint-shellcheck source-do
:lint:tags: part lint-tags source-do

# TODO: manual
:manuals function - u_s-man
:pack function



# TODO: auto-install/config
./.cllct/src/sh-stats function build_sh_stats u_s-stats
./.meta/cache/build-rules.list part concat-rules
./.meta/cache/source.list if :git:index -- exec git ls-files
./.meta/cache/source-dev.list function - &source-list
./.meta/cache/source-sh.list if :git:index -- eval git ls-files '*.sh' 'sh-*' '*.do' '*.bats'
./.meta/cache/source-dev-sh.list function - &sh-list


### Special psuedo-target helpers (moved to build-env shell)

#:if: function -
#:if:lines: function -
#:if:fun: function -
#
#:if:scr-fun: function -
#:if:line-col1: function -


# manual-user-lib simpleglob src/man/man7/User-Script:*.7
# Id: User-scripts/0.0.2-dev .meta/stat/index/build-rules-us.list [2022] ex:ft=less.txt:
