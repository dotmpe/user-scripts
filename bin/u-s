#!/usr/bin/env bash

# Initial CLI helper for any kind of U-S checkout or install


init() #
{
  test -n "$U_S" || return 100

  sys_man=$(which man)
  man() { u_s_man; }

  : "${offline:=}"

  # Bootstrap SCRIPTPATH and default-libs, then return to main routine
  . $U_S/tools/sh/init.sh || {
    $PWD/tools/sh/log.sh "error" "" "During init.sh" $?
    return 1
  }
  INIT_LOG=$PWD/tools/sh/log.sh lib_init || {
    $PWD/tools/sh/log.sh "error" "" "During lib init" $?
    return 1
  }
  U_S_VERSION="$(u_s_version)"

  u_s_env_init
}

edit_docs() # [Files...]
{
  test $# -gt 0 || set -- $U_S/src/man/*/*.md
  $EDITOR "$@"
}

# Edit main command scripts or anything
edit() # [Files...]
{
  test $# -gt 0 || set -- "$@" $U_S/commands/u_s-*.lib.sh
  $EDITOR "$@"
}

update() # [Repo-Release] [Repo-Id] [Repo-URL]
{
  test $# -le 3 || return 99
  test "$PWD" = "$U_S" || cd "$U_S"
  git_reset_hard "$@"
}

reinstall() # [<ns_name>/<repo_name>]
{
  cd  # Move out of U-s to HOME so CWD doesn't get confused
  u_s_reinstall
}

redo_reinit() #
{
  test $# -eq 0 || return 99
  cd /src/github.com/apenwarr/redo &&
    sudo git clean -dfx &&
    sudo ./redo install
}

run_test()
{
  ./sh-main run-baseline
  ./sh-main run-test
  ./sh-main dckr retest-suite
}

lastbuilds() #
{
  ledge_lastbuilds "$@"
}

lastbuild() #
{
  lastbuilds 1
}

listtags()
{
  set -- web docker-hub ; lib_load "$@" && lib_init "$@"

  docker_hub_tags dotmpe/ledge
}

pullall()
{
  test $# -gt 0 || set -- $(listtags)
  ${dckr_pref-}docker pull busybox >/dev/null
  dckr_refresh_images $( for tag in $@; do echo "dotmpe/ledge:$tag"; done)
}

listfiles()
{
  test $# -gt 0 || set -- $(listtags)
  ledge_listsd "$@"
}

listlogs()
{
  test $# -gt 0 || set -- $(listtags)
  ledge_listlogs "$@"
}


# List raw func names as commands. TODO: indent spec maybe shortdescr nicely
commands() #
{
  test $# -eq 0 || return 99
  set -- "$0" $U_S/commands/*.lib.sh
  grep -h '^[a-z_][a-z0-9_]*()' "$@" | cut -d'{' -f1
}

u_s__help__man_1='

  help [CMD-or-TOPIC] - Print this help, or manual section for topic.

  help <sh-function>
  help <sh-lib>

  help [<section>] <topic>

  docs [<apropos>]
  doc [<>]

TODO build topics list
'
print_help()
{
  cat <<EOM
TODO: these are the main script commands of u-s.
For more on getting help, see 'help help' or 'help doc' for topics.

Main commands:

  update [version] - fetch and hard-reset to latest version
  reinstall

$u_s__help__man_1

Docker:

  dckr [CMD ARG...] - Execue U-S sub-command in container
  dckr-init - Create docker container
  dckr-reset - Delete docker container
  dckr-shell CMD - Execute login shell at U-S dir
  dckr-cmd CMD - Execute inline command with dckr-shell

$u_s_ledge__man_1

EOM

}
print_usage()
{
  cat <<EOM
Usage: u-s [CMD [ARG...]]
Use 'commands' for a full list;
TODO: or 'topics' to index other manuals.
EOM
}

help() # [Section] [Name]
{
  test $# -le 2 || return 99
  test $# -gt 0 && {
    # TODO: print help for commands as well, maybe summaries for lists of topics @Docs
    print_topic "$@"
    return $?
  } || {
    print_usage
    print_help
  }
}

usage() #
{
  test $# -eq 0 || return 99
  help
  exit 1
}

# Excho version retrieved from Git on load/init. See u-s-git and u-s-version.
version() #
{
  test $# -eq 0 || return 99
  echo "$U_S_VERSION"
}

main() # [SUBCMD [ARGS...]]
{
  print_err "info" "" "Initializing shell..."
  # Get SCRIPTPATH and bootstrap libs
  init ||
    $LOG error ":main" "During shell init" "$?" 1
  $LOG note "" "Initialized, booting cmd..."
  # TODO: better stderr/logger printer
  #print_err "ok" "" "Initialized, booting cmd..."

  # Call sub-command shell function
  test $# -gt 0 || set -- usage
  test "$1" != "main" || return # NOTE: Sanity.

  local subcmd="$1" cmdid cmdgrp=

  test $# -eq 1 && {
    str_vid cmdid "$subcmd" || return
  } || {
    str_vid cmdid "$subcmd-${2:?}" || return
    func_exists "$cmdid" && {
      print_err "info" "" "Found group-cmd" "$subcmd:$2"
      subcmd=$subcmd:$2 cmdgrp=$cmdid
      shift
    }
  }
  shift
  test -z "${DEBUG:-}" ||
    print_err "note" "" "Starting..." "$*"
  $cmdid "$@"
}

case "$0" in
  "-*" ) * ;; # No-op/err-state when sourced into login session
  */u-s ) # Run command in U-s tool env

  set -e # Sh, same as?:
  set -o errexit # Ash, Bash
  set -o nounset # Ash, Bash
  set -o pipefail # Bash-only
  set -E
  set -T
  shopt -s extdebug
  # XXX: set -o posix

  : "${U_S:="$(dirname "$(dirname "$(realpath -- "$0")")")"}"
  : "${CWD:="$U_S"}"
  : "${sh_tools:="$CWD/tools/sh"}"
  . "${_ENV:="$sh_tools/u_s-env.sh"}" || exit 101

  for x in basher dckr ledge git man travis user
  do
    . "$U_S/commands/u_s-$x.lib.sh" ||
      print_err "error" "" "Loading parts" "$? $x" $?
  done
  unset x
  u_s_ledge_lib__load

  set -euETo pipefail
  main "$@"

;; esac # No match for non-login session, or when included in other tools
